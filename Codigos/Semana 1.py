# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TFIYK_3PulqPPh6sa2EiyuiVSrxLWu90
"""

import sympy as sp
from sympy import *

from sympy import Matrix

a = Matrix([0, 0])
b = Matrix([4, 0])
c = Matrix([0, 1])
Centro = 1/3*(a+b+c)
print(Centro)

"""1.2.7 # 6"""

a = Matrix([1, 2, 3])
b = Matrix([4, 5, 6])
c = Matrix([3, 2, 1])
d = Matrix([6, 5, 4])

print("a) Operaciones entre vectores:")
oper1 = a + b + c + d
oper2 = a + b - c - d
oper3 = a - b + c - d
oper4 = -a + b - c + d
resultados = [oper1, oper2, oper3, oper4]

for i, op in enumerate(resultados, start=1):
    print(f"Operación #{i}: {op}")


print("\nb) Ángulos entre los vectores a, b, c, d y las bases e1, e2, e3:")

e1 = Matrix([1, 0, 0])
e2 = Matrix([0, 1, 0])
e3 = Matrix([0, 0, 1])
bases = {'e1': e1, 'e2': e2, 'e3': e3}
vectores = {'a': a, 'b': b, 'c': c, 'd': d}

for nombre_v, v in vectores.items():
    norma_v = v.norm()
    print(f"\nÁngulos del vector {nombre_v}:")
    for nombre_e, e in bases.items():
        cos_theta = v.dot(e) / norma_v
        angulo = acos(cos_theta) * 180 / pi
        print(f"Ángulo con {nombre_e}: {N(angulo, 4)}°")


print("\nc) Normas de los vectores:")
Normas = [a.norm(), b.norm(), c.norm(), d.norm()]
for i, n in enumerate(Normas, start=1):
    print(f"Norma del vector #{i}: {n}")

print("\nd) angulo entre vectores:")
Angulo_ab = acos(a.dot(b) / (a.norm() * b.norm()))*180*sp.pi**-1
Angulo_cd = acos(c.dot(d) / (c.norm() * d.norm()))*180*sp.pi**-1
print(f"a y b = {N(Angulo_ab, 4)}°\n c y d = {N(Angulo_cd, 4)}°")

print("\ne) la proyecion a sobre b")
proy_ab = (a.dot(b) / b.norm()**2) * b
print(f"a sobre b =",proy_ab)

print("\nf) Productos triples escalares:")
Cruz_1 = [("a·bxc",N(a.dot(b.cross(c)),4)),("a·bxd",N(a.dot(b.cross(d)),4)),("a·cxd",N(a.dot(c.cross(d)),4)),("b·cxd",N(b.dot(c.cross(d)),4))]

print(" Producto vectorial:",Cruz_1)


print("\ng")
g = (a + b).dot(c + d)
print("(a + b) · (c + d) = ",g)
print("\nh")
axb = a.cross(b)
bxc = b.cross(c)
cxd = c.cross(d)
angulos = [("a × b", N(acos(axb.dot(d) / (axb.norm() * d.norm())) * 180 / pi, 4)),("b × c", N(acos(bxc.dot(d) / (bxc.norm() * d.norm())) * 180 / pi, 4)), ("c × d", N(acos(cxd.dot(d) / (cxd.norm() * d.norm())) * 180 / pi, 4)),]
print("Ángulos entre producto cruz y d:", angulos)

print("\ni")
print("c·(axb) =",c.dot(a.cross(b)))

t = sp.symbols('t', real=True)
x, y = sp.symbols('x y', real=True)

Fx = -y/(x**2 + y**2)
Fy = x/(x**2 + y**2)

x_t = sp.cos(t)
y_t = sp.sin(t)

dx_dt = sp.diff(x_t, t)
dy_dt = sp.diff(y_t, t)


Fx_t = Fx.subs({x: x_t, y: y_t})
Fy_t = Fy.subs({x: x_t, y: y_t})


F_dot_rp = Fx_t * dx_dt + Fy_t * dy_dt

W_a = -sp.integrate(F_dot_rp, (t, 0, sp.pi))
W_b = -sp.integrate(F_dot_rp, (t, 0, -sp.pi))

print("Trabajo en contra del campo:", W_a, W_b)

